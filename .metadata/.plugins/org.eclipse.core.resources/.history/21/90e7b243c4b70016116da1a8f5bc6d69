package principal;

import java.io.*;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import auxiliar.*;

// consultas sobre matcher:
// http://puntocomnoesunlenguaje.blogspot.com.es/2013/07/ejemplos-expresiones-regulares-java-split.html
// Comprobar expresiones regulares: http://www.regexper.com/ 
//ASDasdasddasasdasdssadasdsdadassdadassd

public class STLViewer {

	private static int trianguloN;
	private static FacetList facetlist;
	private static final String numeroVector="-?\\d\\.\\d{1,7}([eE][-+]\\d{1,2})?";
	private static final String etiquetaFacet="(?s)[ \\t]*facet normal +("+numeroVector+") +("+numeroVector+") +("+numeroVector+")(.*?)[ \\t]*endfacet$";
	
	private static final String numeroVertice="[ \\t]*vertex +("+numeroVector+") +("+numeroVector+") +("+numeroVector+")";
	private static final String etiquetaLoop="[ \\t]*outer loop +"+numeroVertice+" +"+numeroVertice+" +"+numeroVertice+"[ \\t]*endloop$";
	
	//etiquetaFacet="(?s)[ \\t]*facet normal ("+numeroVector+") ("+numeroVector+") ("+numeroVector+")(.*?)[ \\t]*endfacet$";
	//etiquetaFacet="(?s)[\\t ]*facet normal (-?\\d\\.\\d{1,7}([eE][-+]\\d{1,2})?)  (-?\\d\\.\\d{1,7}([eE][-+]\\d{1,2})?) (-?\\d\\.\\d{1,7}([eE][+-]\\d{1,2})?)(.*?)[\\t ]*endfacet$";
	//etiquetaLoop="[ \\t]*outer\\sloop\\s*"+numeroVertice+"\\s*"+numeroVertice+"\\s*"+numeroVertice+"\\s*endloop";
	//etiquetaLoop="[ \\t]*outer loop\\s"+numeroVertice+"\\s"+numeroVertice+"\\s"+numeroVertice+"\\s[ \\t]*endloop";
	
	/**
	 * Crea un nuevo objeto Facet, la inicializa con los vectores introducidos, y lo añade a la FacetLiast.
	 * @param vectorNormal vector normal del triángulo.
	 * @param vector1 primer vector  del triángulo.
	 * @param vector2 segundo vector  del triángulo.
	 * @param vector3 tercer vector  del triángulo.
	 */
	public static void añadirFacet(float[] vectorNormal,float[] vector1,float[] vector2,float[] vector3)
	{
		Facet facet=new Facet();
		facet.setNormal(vectorNormal[0], vectorNormal[1],vectorNormal[2]);
		facet.setVertex1(vector1[0],vector1[1],vector1[2]);
		facet.setVertex2(vector2[0],vector2[1],vector2[2]);
		facet.setVertex3(vector3[0],vector3[1],vector3[2]);
		facetlist.add(facet);
	}
	
	/**
	 * Comprueba que la extensión del nombre del fichero sea la correcta.
	 * @param nombreFichero nombre que se desea comprobar.
	 * @return true si tiene extensión .stl, false en caso contrario.
	 */
	public static boolean comprobarNombreFichero(String nombreFichero) 
	{
       Pattern pat = Pattern.compile(".+\\.stl$");
       Matcher mat = pat.matcher(nombreFichero);
       if (mat.matches()) 
    	   return true; 	//Caso en el que el fichero tiene extensión correcta
        else 
    	   return false;    //Caso en el que el fichero no tiene extensión correcta
	}
	
	/**
	 * Comprueba que los números que forman los vertices sean distintos de infinito y positivos.
	 * @param vector1 primer vector  del triángulo.
	 * @param vector2 segundo vector  del triángulo.
	 * @param vector3 tercer vector  del triángulo.
	 */
	public static void comprobarVertices(float[] vector1,float[] vector2,float[] vector3)
	{
		for (int i = 0; i <3; i++) {
			if(vector1[i]==Float.POSITIVE_INFINITY || vector1[i]==Float.NEGATIVE_INFINITY)
				errorDeLectura3(3);
			if(vector1[i]<0)
				System.err.println("Línea "+((trianguloN-1)*7+4)+": El vértice "+(i+1)+" es negativo.");
			if(vector2[i]==Float.POSITIVE_INFINITY || vector1[i]==Float.NEGATIVE_INFINITY)
				errorDeLectura3(4);
			if(vector2[i]<0)
				System.err.println("Línea "+((trianguloN-1)*7+5)+": El vértice "+(i+1)+" es negativo.");
			if(vector3[i]==Float.POSITIVE_INFINITY || vector1[i]==Float.NEGATIVE_INFINITY)
				errorDeLectura3(5);
			if(vector3[i]<0)
				System.err.println("Línea "+((trianguloN-1)*7+6)+": El vértice "+(i+1)+" es negativo.");
		}
	}
	
	/**
	 * Calcula la norma del vector introducido.
	 * @param vector 
	 * @return norma del vector
	 */
	public static double calcularNorma(float[] vector)
	{
		double norma=Math.pow(vector[0],2)+Math.pow(vector[1],2)+Math.pow(vector[2],2);
		norma=Math.sqrt(norma);
		return norma;
	}
	
	/**
	 * Calcula el vector normal del triángulo formado por tres vértices.
	 * @param vector1primer vector  del triángulo.
	 * @param vector2 segundo vector  del triángulo.
	 * @param vector3 tercer vector  del triángulo.
	 * @return vector normal del triángulo
	 */
	public static float[] calcularVectorNormal(float[] vector1,float[] vector2,float[] vector3)
	{
		float[] vectorA=new float[3];
		float[] vectorB=new float[3];
		float[] normal=new float[3];
		for (int i = 0; i < 3; i++)
		{
			vectorA[i]=vector2[i]-vector1[i];
			vectorB[i]=vector3[i]-vector1[i];
		}
		normal[0]=vectorA[1]*vectorB[2]-vectorA[2]*vectorB[1];
		normal[1]=vectorA[2]*vectorB[0]-vectorA[0]*vectorB[2];
		normal[2]=vectorA[0]*vectorB[1]-vectorA[1]*vectorB[0];
		double norma= calcularNorma(normal);
		for (int i = 0; i < 3; i++)
			normal[i]=(float)(normal[i]/norma);
		return normal;
	}
	
	/**
	 * Comprueba que el ángulo formado por los dos vectores introducidos no difiera de 1.0e-03.
	 * @param vector1
	 * @param vector2
	 * @return true si el angulo formado es menor que 1.0e-03, flase en caso contrario.
	 */
	public static boolean comprobarAngulo(float[] vector1,float[] vector2)
	{
		double angulo,escalar;
		escalar=vector1[0]*vector2[0]+vector1[1]*vector2[1]+vector1[2]*vector2[2];
		angulo=Math.acos(escalar);
		if(angulo>1.0e-03)
			return false;
		else
			return true;
	}
	
	/**
	 * Comprueba que el triángulo introducido cumpla las condiciones exigidas.
	 * Extrae los vectores y los vertices introducidos, los transforma en floats, comprueba que sean correctos, en el caso de que
	 * haya algún error en los datos introducidos los cambia por los datos calculados. Por último añade el triángulo a un Facet para 
	 * que sea añadido a la FacetList.
	 * @param triangulo cadena de texto leida del fichero que contiene la información relativa a un único triángulo.
	 */
	public static void comprobarFormatoTriangulo(String triangulo)
	{
		Pattern patLoop = Pattern.compile(etiquetaLoop);
		Pattern patFacet = Pattern.compile(etiquetaFacet);
		float[] vectorNormal=new float[3];
		float[] vectorNormalAux=new float[3];
		float[] vector1=new float[3];
		float[] vector2=new float[3];
		float[] vector3=new float[3];
		
		//System.out.println(triangulo);
		trianguloN++;
		Matcher matFacet= patFacet.matcher(triangulo);
	    if (!matFacet.matches()) 
	    {
	    	System.err.println("Facet");
	    	errorDeLectura2();
	    }
	    	
	    //System.out.println("Vector normal insertado: "+matFacet.group(1)+" "+matFacet.group(2)+" "+matFacet.group(3) );    
	    for (int i = 0; i < 3; i++) {
			vectorNormal[i]=Float.parseFloat(matFacet.group(i*2+1));
		}
	    triangulo=matFacet.group(7);
	    //System.out.println(triangulo);
		Matcher matLoop = patLoop.matcher(triangulo); 
		if (!matLoop.matches()) 
		{
	    	System.err.println("Loop");
	    	errorDeLectura2();
	    }
		else
		{
			for (int i = 0; i < 3; i++)
			{
				vector1[i]=Float.parseFloat(matLoop.group(2*i+1));
				vector2[i]=Float.parseFloat(matLoop.group(2*i+7));
				vector3[i]=Float.parseFloat(matLoop.group(2*i+13));
			}
		}
		comprobarVertices(vector1, vector2, vector3);
		//System.out.println("vector1 insertado: "+vector1[0]+" "+vector1[1]+" "+vector1[2] );
		//System.out.println("vector2 insertado: "+vector2[0]+" "+vector2[1]+" "+vector2[2] );
		//System.out.println("vector3 insertado: "+vector3[0]+" "+vector3[1]+" "+vector3[2] );
		double norma=calcularNorma(vectorNormal);
		//System.out.println("Norma= "+norma);
		boolean error=false;
		if(((norma-1.0)>1.0e-06)||((norma-1.0)<-1.0e-06))
		{
			System.out.println("Línea "+((trianguloN-1)*7+2)+": El vector normal no es unitario.");
			error=true;
		}
		else
		{
			vectorNormalAux=calcularVectorNormal(vector1, vector2, vector3);
			//System.out.println("vector normal calculado: "+vectorNormalAux[0]+" "+vectorNormalAux[1]+" "+vectorNormalAux[2] );
			if(!comprobarAngulo(vectorNormalAux, vectorNormal))
			{
				System.err.println("Línea "+((trianguloN-1)*7+2)+": El vector normal no se corresponde con el que forman los vértices.");
				error=true;	
			}
		}
		if(error)
			vectorNormal=vectorNormalAux;
		añadirFacet(vectorNormal, vector1, vector2, vector3);
	}
	
	/**
	 * Salida de error: caso en el que el fichero está incompleto y le faltan líneas.
	 */
	public static void errorDeLectura1()
	{
		System.err.println("Error en la lectura del fichero, el fichero está incompleto.\nPrograma finalizado.");
		System.exit(0);
	}
	
	/**
	 * Salida de error: caso en el que el fichero contiene algún triángulo incompleto o con está escrtito con una sintaxis incorrecta.
	 */
	public static void errorDeLectura2()
	{
		System.err.println("Error en la lectura del fichero, el formato del triángulo número "+ trianguloN + " no es correcto.\n"+
				"El tirángulo se encuentra entre las líneas "+((trianguloN-1)*7+1)+"-"+((trianguloN-1)*7+8)+" del fichero. \n Programa finalizado.");
		System.exit(0);
	}
	
	/**
	 * Salida de error: caso en el que el fichero contiene algún triángulo incorrecto.
	 * @param linea en la que se ha producido el error.
	 */
	public static void errorDeLectura3(int linea)
	{
		System.err.println("Línea "+((trianguloN-1)*7+linea+1)+" : Valor infinito.\nPrograma finalizado.");
		System.err.println("Error en la lectura del fichero, el triangulo número "+ trianguloN + " en la línea "+ ((trianguloN-1)*7+linea+1) +" no es correcto.\nPrograma finalizado.");
		System.exit(0);
	}
	
	/**
	 * Lee línea a línea el fichero y va pasandole a la función comprobarFormatoTriangulo un String con las siete líneas que componen un triángulo.
	 * @param nombreFichero fichero que se desea leer.
	 * @throws IOException error al abrir el fichero.
	 */
	public static void leerFichero(String nombreFichero)throws IOException  
	{
		File fichero = new File (nombreFichero); // Crea un objeto File a partir del nombre del fichero a leer
		FileReader fr = new FileReader(fichero); //Crea un FileReader para recorrer el fichero y recuperar el contenido
		BufferedReader br = new BufferedReader(fr); //Crea un BufferedReader a partir del FileReader para leer por líneas el contenido.
		StringBuffer texto=new StringBuffer();
		String linea;
		boolean finDeFichero = false;
		Pattern patName = Pattern.compile("^solid ([a-zA-Z]*)$");
		Pattern patEndName;
		 String finSolido="^endsolid ";
		if( (linea = br.readLine()) != null )	
		{
			Matcher matName = patName.matcher(linea); 
		    if (!matName.matches()) 
		    	errorDeLectura1();
		    finSolido+=matName.group(1)+"$";
		} 
	    patEndName = Pattern.compile(finSolido);
		while(!finDeFichero)
		{
			if( (linea = br.readLine()) == null )
		    	errorDeLectura1();
		//System.out.println(linea);
			Matcher matEndName = patEndName.matcher(linea); //frase "endsolid ..."
		    if (matEndName.matches()) 
		    	finDeFichero=true;
		    else
		    {
		    	texto.append(linea); //añado la línea leída con readLine al buffer
		    	for (int i = 0; i < 6; i++) {
		    		if((linea = br.readLine()) != null)
		    			texto.append(linea); //añado la línea leída con readLine al buffer
		    		else
				    	errorDeLectura1();

				}
		    	comprobarFormatoTriangulo(texto.toString());
		    	texto.delete(0, texto.length());
		    }
		}
		br.close();
		fr.close();
	}
	
	public static void main(String[] args) {

		Scanner consola = new Scanner(System.in); //Crea Scanner para leer por consola
		facetlist= new FacetList();
		boolean control=true;
		Pattern patName = Pattern.compile("^$");
		trianguloN=0;
		while(control)
		{
			System.out.println("Nombre del fichero a leer con extensión .stl: ");
		    String nombreFich=consola.nextLine(); //lee la línea con el nombre de fichero  desde consola			
		    Matcher matName = patName.matcher(nombreFich);
		    if(matName.matches())
				System.exit(0);
		    if(!comprobarNombreFichero(nombreFich))
				System.err.println("Extensión del fichero incorrecta, asegúrese de que tiene extensión .stl.");
			else 
			{
				try {
					leerFichero(nombreFich);	//se intenta leer el contenido de fichero
					control=false;			  
				} catch (IOException e) {
					System.err.println("***Error de lectura***\n Asegúrese de que el fichero existe."); 
					control=true;
				    } 	
			}
		}
		consola.close();
		//facetlist.setUseFileNormals(false);
		J3DViewer.display(facetlist, 500, 500);
	}
}
